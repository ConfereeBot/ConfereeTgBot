from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from aiogram.fsm.state import State, StatesGroup
from app.database.tag_db_operations import unarchive_tag_in_db, delete_tag_from_db, archive_tag_in_db, get_tag_by_id
from app.keyboards import inline_active_tag_list, manage_tag_inline_keyboard, inline_archived_tag_list, \
    inline_archived_tag_actions, main_actions_keyboard, inline_single_cancel_button, tag_deletion_confirmation_keyboard
from app.roles.user.callbacks_enum import Callbacks
from app.roles.user.user_cmds import user, logger


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class TagManagementStates(StatesGroup):
    waiting_for_delete_confirmation = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è


# General
async def manage_tags(event: Message | CallbackQuery, state: FSMContext = None):
    logger.info("manage_tags_call")
    if state:
        await state.clear()
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:"
    reply_markup = await inline_active_tag_list(
        on_item_clicked_callback=Callbacks.tag_clicked_manage_callback,
        on_item_create_clicked_callback=Callbacks.tag_create_callback,
        on_cancel_clicked_callback=Callbacks.cancel_primary_action_callback,
        on_archived_clicked_callback=Callbacks.show_archived_in_manage_mode
    )
    print(f"Type of this is {type(Callbacks.cancel_primary_action_callback)}")
    if isinstance(event, Message):
        await event.answer(text=text, reply_markup=reply_markup)
    elif isinstance(event, CallbackQuery):
        await event.message.edit_text(text=text, reply_markup=reply_markup)
        await event.answer("")


@user.message(F.text == "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏")
async def handle_manage_tags_command(message: Message):
    await manage_tags(message)


# Archive manage
@user.callback_query(
    F.data == Callbacks.show_archived_in_manage_mode
    or F.data == Callbacks.return_back_from_archived_tag_actions_callback
)
async def on_show_archived_in_manage_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥ –∏–∑ –∞—Ä—Ö–∏–≤–∞:",
        reply_markup=await inline_archived_tag_list(
            on_item_clicked_callback=Callbacks.archived_tag_clicked_manage_callback,
            on_back_clicked_callback=Callbacks.return_back_from_archived_callback,
        )
    )
    await callback.answer("")


@user.callback_query(F.data.startswith(Callbacks.archived_tag_clicked_manage_callback))
async def on_archived_tag_clicked_in_manage_mode(callback: CallbackQuery):
    try:
        tag_id = callback.data.split(":")[1]
    except IndexError:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–≥ –Ω–µ –≤—ã–±—Ä–∞–Ω!", show_alert=True)
        return
    tag = await get_tag_by_id(tag_id)
    if not tag:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        return
    await callback.message.edit_text(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–≥–æ–º '{tag.name}':",
        reply_markup=await inline_archived_tag_actions(
            on_unarchive_clicked_callback=f"{Callbacks.unarchive_tag_clicked_callback}:{tag_id}",
            on_delete_clicked_callback=f"{Callbacks.tag_delete_callback}:{tag_id}",
            on_back_clicked_callback=f"{Callbacks.return_back_from_archived_tag_actions_callback}:{tag_id}"
        )
    )
    await callback.answer("")


@user.callback_query(F.data.startswith(Callbacks.unarchive_tag_clicked_callback))
async def unarchive_tag_clicked_callback(callback: CallbackQuery):
    print(f"Received callback.data: {callback.data}")  # –û—Ç–ª–∞–¥–∫–∞
    try:
        tag_id = callback.data.split(":")[1]
    except IndexError:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–≥ –Ω–µ –≤—ã–±—Ä–∞–Ω!", show_alert=True)
        return
    success, response = await unarchive_tag_in_db(tag_id)
    await callback.message.answer(
        text=response,
        reply_markup=main_actions_keyboard
    )
    await callback.message.delete()
    await callback.answer("")


@user.callback_query(F.data == Callbacks.return_back_from_archived_callback)
async def return_back_from_archived(callback: CallbackQuery, state: FSMContext):
    await manage_tags(callback, state)


# Usual tag manage
@user.callback_query(F.data.startswith(Callbacks.tag_clicked_manage_callback))
async def tag_clicked_manage_callback(callback: CallbackQuery):
    try:
        tag_id = callback.data.split(":")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º tag_id
    except IndexError:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–≥ –Ω–µ –≤—ã–±—Ä–∞–Ω!", show_alert=True)
        return
    tag = await get_tag_by_id(tag_id)
    if not tag:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        return
    await callback.answer("")
    await callback.message.edit_text(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —Ç–µ–≥–æ–º '{tag.name}'",
        reply_markup=manage_tag_inline_keyboard(tag_id)
    )


# –ù–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
@user.callback_query(F.data.startswith(Callbacks.tag_archive_callback))
async def on_tag_archive_callback(callback: CallbackQuery):
    try:
        tag_id = callback.data.split(":")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º tag_id
    except IndexError:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–≥ –Ω–µ –≤—ã–±—Ä–∞–Ω!", show_alert=True)
        return
    success, response = await archive_tag_in_db(tag_id)
    await callback.message.answer(
        text=response,
        reply_markup=main_actions_keyboard
    )
    await callback.message.delete()
    await callback.answer("")


# Callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–∞
@user.callback_query(F.data.startswith(Callbacks.tag_delete_callback))
async def on_tag_delete_callback(callback: CallbackQuery, state: FSMContext):
    try:
        tag_id = callback.data.split(":")[1]
    except IndexError:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–≥ –Ω–µ –≤—ã–±—Ä–∞–Ω!", show_alert=True)
        return
    tag = await get_tag_by_id(tag_id)
    if not tag:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        return
    await state.update_data(tag_id=tag_id)
    await state.set_state(TagManagementStates.waiting_for_delete_confirmation)
    await callback.message.edit_text(
        text=f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ '{tag.name}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –∑–∞–ø–∏—Å–∏ –Ω–∞–≤—Å–µ–≥–¥–∞?",
        reply_markup=tag_deletion_confirmation_keyboard
    )
    await callback.answer("")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@user.callback_query(F.data == Callbacks.cancel_deletion, TagManagementStates.waiting_for_delete_confirmation)
async def on_cancel_delete(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    tag_id = state_data.get("tag_id")
    if not tag_id:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        await state.clear()
        return
    tag = await get_tag_by_id(tag_id)
    if not tag:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        await state.clear()
        return
    await callback.message.edit_text(
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–≥–æ–º '{tag.name}':",
        reply_markup=await inline_archived_tag_actions(
            on_unarchive_clicked_callback=f"{Callbacks.unarchive_tag_clicked_callback}:{tag_id}",
            on_delete_clicked_callback=f"{Callbacks.tag_delete_callback}:{tag_id}",
            on_back_clicked_callback=f"{Callbacks.return_back_from_archived_tag_actions_callback}:{tag_id}"
        )
    )
    await state.clear()
    await callback.answer("")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@user.callback_query(F.data == Callbacks.confirm_deletion, TagManagementStates.waiting_for_delete_confirmation)
async def on_confirm_delete(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    tag_id = state_data.get("tag_id")
    if not tag_id:
        await callback.answer("–û—à–∏–±–∫–∞: —Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        await state.clear()
        return
    success, response = await delete_tag_from_db(tag_id)
    await callback.message.answer(
        text=response,
        reply_markup=main_actions_keyboard
    )
    await callback.message.delete()
    await state.clear()
    await callback.answer("")


@user.callback_query(F.data == Callbacks.cancel_tag_manage_callback)
async def on_cancel_tag_manage(callback: CallbackQuery, state: FSMContext):
    await manage_tags(callback, state)
