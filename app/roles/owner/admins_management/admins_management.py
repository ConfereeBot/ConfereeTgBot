from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from app.config import labels
from app.config.config import OWNERS
from app.database.user_db_operations import (
    add_or_update_user_to_admin,
    demote_admin_to_user,
    get_user_by_id,
    get_user_by_telegram_tag,
)
from app.keyboards import (
    inline_admin_list,
    inline_single_cancel_button,
    main_actions_keyboard,
)
from app.roles.owner.owner import owner  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä owner
from app.roles.user.callbacks_enum import Callbacks
from app.utils.logger import logger


class AdminManagementStates(StatesGroup):
    waiting_for_admin_username = State()


def is_valid_telegram_username(username: str) -> bool:
    return (
            username.startswith("@")
            and len(username) >= 5
            and not username[1].isdigit()
            and username[1] != "_"
            and all(c.isalnum() or c == "_" for c in username[1:])
    )


@owner.message(F.text == labels.MANAGE_ADMINS)
async def manage_admins(message: Message):
    logger.info("manage_admins_call")
    telegram_tag = f"@{message.from_user.username}" if message.from_user.username else f"@{message.from_user.id}"
    user = await get_user_by_telegram_tag(telegram_tag)
    if not user:
        return
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ:",
        reply_markup=await inline_admin_list(
            on_cancel_clicked_callback=Callbacks.cancel_primary_action_callback
        ),
    )


async def on_add_admin_clicked(callback: CallbackQuery, state: FSMContext):
    text = "–í–≤–µ–¥–∏—Ç–µ Telegram-—Ç–µ–≥ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '@username':"
    reply_markup = await inline_single_cancel_button(Callbacks.cancel_primary_action_callback)
    await callback.message.edit_text(text=text, reply_markup=reply_markup)
    await state.set_state(AdminManagementStates.waiting_for_admin_username)
    await callback.answer()


@owner.callback_query(F.data == Callbacks.add_admin_callback)
async def handle_add_admin_callback(callback: CallbackQuery, state: FSMContext):
    await on_add_admin_clicked(callback, state)


@owner.message(AdminManagementStates.waiting_for_admin_username)
async def process_admin_username(message: Message, state: FSMContext):
    username = message.text.strip()
    if not is_valid_telegram_username(username):
        await message.answer(
            text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '@username'\n"
                 "(–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _, "
                 "–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã –∏–ª–∏ _).\n–í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=await inline_single_cancel_button(
                Callbacks.cancel_primary_action_callback
            ),
        )
        return
    if username in OWNERS:
        await message.answer(
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω—ë–Ω!",
            reply_markup=await inline_single_cancel_button(Callbacks.cancel_primary_action_callback)
        )
        return
    success, response = await add_or_update_user_to_admin(username)
    telegram_tag = f"@{message.from_user.username}" if message.from_user.username else f"@{message.from_user.id}"
    user = await get_user_by_telegram_tag(telegram_tag)
    if not user:
        return
    if success:
        await message.answer(text=response, reply_markup=main_actions_keyboard(user.role))
        await state.clear()
    else:
        await message.answer(
            text=response,
            reply_markup=await inline_single_cancel_button(
                Callbacks.cancel_primary_action_callback
            ),
        )
    await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)


@owner.callback_query(F.data.startswith("admin_clicked"))
async def on_admin_clicked(callback: CallbackQuery):
    try:
        user_id = callback.data.split(":")[1]
    except IndexError:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω!", show_alert=True)
        return
    user = await get_user_by_id(user_id)
    if not user or user.role != "admin":
        await callback.answer("–û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        print(f"–û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω —Å id {user_id}!")
        return
    text = (
        f"Username –∞–¥–º–∏–Ω–∞: {user.telegram_id}\n"
        "–ê–¥–º–∏–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞–º–∏ (–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –∞—Ä—Ö–∏–≤–∞—Ü–∏—é –∏ —É–¥–∞–ª–µ–Ω–∏–µ)."
    )
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üóëÔ∏è –ü–æ–Ω–∏–∑–∏—Ç—å –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    callback_data=f"{Callbacks.admin_delete_callback}:{user_id}",
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                    callback_data=Callbacks.return_to_admin_list_callback,
                )
            ],
        ]
    )
    await callback.message.edit_text(text=text, reply_markup=reply_markup)
    await callback.answer("")


@owner.callback_query(F.data.startswith(Callbacks.admin_delete_callback))
async def on_admin_delete_callback(callback: CallbackQuery):
    try:
        user_id = callback.data.split(":")[1]
    except IndexError:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω!", show_alert=True)
        return
    success, response = await demote_admin_to_user(user_id)
    telegram_tag = f"@{callback.from_user.username}" if callback.from_user.username else f"@{callback.from_user.id}"
    user = await get_user_by_telegram_tag(telegram_tag)
    if not user:
        return
    await callback.message.answer(text=response, reply_markup=main_actions_keyboard(user.role))
    await callback.message.delete()
    await callback.answer("")


@owner.callback_query(F.data == Callbacks.return_to_admin_list_callback)
async def on_return_to_admin_list(callback: CallbackQuery):
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ:",
        reply_markup=await inline_admin_list(
            on_cancel_clicked_callback=Callbacks.cancel_primary_action_callback
        ),
    )
    await callback.answer("")


@owner.callback_query(F.data == Callbacks.cancel_primary_action_callback)
async def on_cancel_primary_callback(callback: CallbackQuery, state: FSMContext):
    telegram_tag = f"@{callback.from_user.username}" if callback.from_user.username else f"@{callback.from_user.id}"
    user = await get_user_by_telegram_tag(telegram_tag)
    if not user:
        return
    await callback.answer("")
    await callback.message.delete()
    await callback.message.answer(
        text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.",
        reply_markup=main_actions_keyboard(user.role),
    )
    await state.clear()
