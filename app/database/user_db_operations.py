from typing import List, Optional

from bson import ObjectId
from motor.core import AgnosticCollection
from pymongo.errors import DuplicateKeyError

from app.bot import bot
from app.config.config import OWNERS
from app.config.roles import Role
from app.database.database import db
from app.database.models.user_DBO import User
from app.keyboards import main_actions_keyboard
from app.utils.logger import logger


async def add_user_if_not_exists(telegram_tag: str, telegram_id: int | None) -> tuple[bool, str, User | None]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    user_data = {
        "telegram_tag": telegram_tag,
        "telegram_id": telegram_id,
        "role": Role.USER
    }
    result = await db.db.users.insert_one(user_data)
    if result.inserted_id:
        user = User(_id=result.inserted_id, telegram_tag=telegram_tag, telegram_id=telegram_id, role=Role.USER)
        return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_tag} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é {Role.USER}", user
    return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", None


async def get_user_by_telegram_tag(telegram_tag: str) -> User | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_tag."""
    user_data = await db.db.users.find_one({"telegram_tag": telegram_tag})
    if user_data:
        return User(**user_data)
    return None


async def get_user_by_telegram_id(telegram_id: int) -> User | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id."""
    user_data = await db.db.users.find_one({"telegram_id": telegram_id})
    if user_data:
        return User(**user_data)
    return None


async def update_user_telegram_tag(user_id: ObjectId, new_telegram_tag: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç telegram_tag –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        
    result = await db.db.users.update_one(
        {"_id": user_id},
        {"$set": {"telegram_tag": new_telegram_tag}}
    )
    return result.modified_count > 0


async def update_user_telegram_id(user_id: ObjectId, telegram_id: int) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    result = await db.db.users.update_one(
        {"_id": user_id},
        {"$set": {"telegram_id": telegram_id}}
    )
    return result.modified_count > 0


async def add_or_update_user_to_admin(telegram_tag: str) -> tuple[bool, str]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é admin –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ admin."""
    users_collection: AgnosticCollection = db.db["users"]
    try:
        existing_user = await users_collection.find_one({"telegram_tag": telegram_tag})
        if existing_user:
            if existing_user["role"] == Role.ADMIN:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{telegram_tag}' —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
                return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{telegram_tag}' —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º!"
            if existing_user["role"] == Role.OWNER:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{telegram_tag}' —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω—ë–Ω")
                return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{telegram_tag}' —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω—ë–Ω!"
            result = await users_collection.update_one(
                {"telegram_tag": telegram_tag},
                {"$set": {"role": Role.ADMIN}}
            )
            if result.modified_count > 0:
                notify_successful = await notify_user_about_upgrade_to_admin(telegram_tag)
                if not notify_successful:
                    logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{telegram_tag}' –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏.")
                else:
                    logger.info(f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '{telegram_tag}' –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{telegram_tag}' –ø–æ–≤—ã—à–µ–Ω –¥–æ –∞–¥–º–∏–Ω–∞")
                return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{telegram_tag}' –ø–æ–≤—ã—à–µ–Ω –¥–æ –∞–¥–º–∏–Ω–∞!"
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{telegram_tag}'!"
        else:
            user = User(telegram_tag=telegram_tag, role=Role.ADMIN)
            await users_collection.insert_one(user.model_dump(by_alias=True))
            logger.info(f"–ù–æ–≤—ã–π –∞–¥–º–∏–Ω '{telegram_tag}' –¥–æ–±–∞–≤–ª–µ–Ω —Å id: {user.id}")
            return True, f"–ê–¥–º–∏–Ω '{telegram_tag}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
    except DuplicateKeyError:
        logger.warning(f"–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{telegram_tag}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –¥—Ä—É–≥–æ–π —Ä–æ–ª—å—é")
        return False, f"–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{telegram_tag}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ '{telegram_tag}': {e}")
        return False, f"–û—à–∏–±–∫–∞: {e}"


async def get_all_users() -> List[User]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    users_collection: AgnosticCollection = db.db["users"]
    users = []
    try:
        async for user_doc in users_collection.find():
            users.append(User(**user_doc))
        return users
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []


async def notify_user_about_upgrade_to_admin(telegram_tag: str) -> bool:
    user = await get_user_by_telegram_tag(telegram_tag)
    if user and user.telegram_id is not None:
        await bot.send_message(
            chat_id=user.telegram_id,
            text="üì¢ –í–Ω–∏–º–∞–Ω–∏–µ!\n\n–í—ã –±—ã–ª–∏ –ø–æ–≤—ã—à–µ–Ω—ã –¥–æ –∞–¥–º–∏–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
            reply_markup=main_actions_keyboard(Role.ADMIN)
        )
        return True
    return False


async def notify_user_about_downgrade_to_user(telegram_tag) -> bool:
    user = await get_user_by_telegram_tag(telegram_tag)
    if user and user.telegram_id is not None:
        await bot.send_message(
            chat_id=user.telegram_id,
            text="üì¢ –í–Ω–∏–º–∞–Ω–∏–µ!\n\n–í—ã –±—ã–ª–∏ –ø–æ–Ω–∏–∂–µ–Ω—ã –¥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=main_actions_keyboard(Role.USER)
        )
        return True
    return False


async def get_admins() -> List[User]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é admin."""
    users_collection: AgnosticCollection = db.db["users"]
    admins = []
    try:
        async for user_doc in users_collection.find({"role": Role.ADMIN}):
            admins.append(User(**user_doc))
        return admins
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤: {e}")
        return []


async def get_user_by_id(user_id: str) -> Optional[User]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID."""
    users_collection: AgnosticCollection = db.db["users"]
    try:
        user_doc = await users_collection.find_one({"_id": ObjectId(user_id)})
        if user_doc:
            return User(**user_doc)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id '{user_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id '{user_id}': {e}")
        return None


async def demote_admin_to_user(user_id: str) -> tuple[bool, str]:
    """–ü–æ–Ω–∏–∂–∞–µ—Ç –∞–¥–º–∏–Ω–∞ –¥–æ —Ä–æ–ª–∏ user."""
    users_collection: AgnosticCollection = db.db["users"]
    try:
        user = await get_user_by_id(user_id)
        if not user:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id '{user_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id '{user_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        if user.role != Role.ADMIN:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user.telegram_tag}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º")
            return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user.telegram_tag}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º!"
        result = await users_collection.update_one(
            {"_id": ObjectId(user_id)},
            {"$set": {"role": Role.USER}}
        )
        if result.modified_count == 0:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω–∏–∑–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id '{user_id}'")
            return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω–∏–∑–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user.telegram_tag}'!"
        notify_successful = await notify_user_about_downgrade_to_user(user.telegram_tag)
        if not notify_successful:
            logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user.telegram_tag}' –æ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏")
        else:
            logger.info(f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user.telegram_tag}' –æ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        logger.info(f"–ê–¥–º–∏–Ω '{user.telegram_tag}' –ø–æ–Ω–∏–∂–µ–Ω –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return True, f"–ê–¥–º–∏–Ω '{user.telegram_tag}' –ø–æ–Ω–∏–∂–µ–Ω –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ —Å id '{user_id}': {e}")
        return False, f"–û—à–∏–±–∫–∞: {e}"


async def ensure_owner_role(telegram_tag: str, telegram_id: int | None = None) -> tuple[bool, str]:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å OWNER –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –≤ OWNERS."""
    user = await get_user_by_telegram_id(telegram_id) if telegram_id else None
    if not user:
        user = await get_user_by_telegram_tag(telegram_tag)

    if not user:
        success, response, new_user = await add_user_if_not_exists(telegram_tag, telegram_id)
        if not success:
            return False, response
        user = new_user

    if telegram_tag in OWNERS and user.role != Role.OWNER:
        await db.db.users.update_one(
            {"_id": user.id},
            {"$set": {"role": Role.OWNER}}
        )
        return True, f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_tag} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ OWNER"
    return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_tag} —É–∂–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å {user.role}"


async def delete_user_by_telegram_tag_with_no_telegram_id(telegram_tag: str) -> tuple[bool, str]:
    try:
        result = await db.db.users.delete_one({
            "telegram_tag": telegram_tag,
            "telegram_id": {"$eq": None}
        })

        if result.deleted_count > 0:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–≥–æ–º '{telegram_tag}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
            return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{telegram_tag}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–≥–æ–º '{telegram_tag}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{telegram_tag}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–≥–æ–º '{telegram_tag}': {e}")
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"


async def handle_user_on_start(telegram_tag: str, telegram_id: int) -> User:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ /start."""
    user = await get_user_by_telegram_id(telegram_id)
    if user:
        print("User found with this telegram id")
        if user.telegram_tag != telegram_tag:
            logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º telegram_tag –¥–ª—è {telegram_id}: {user.telegram_tag} -> {telegram_tag}")
            await delete_user_by_telegram_tag_with_no_telegram_id(user.telegram_tag)
            await update_user_telegram_tag(user.id, telegram_tag)
            user.telegram_tag = telegram_tag
        return user

    user = await get_user_by_telegram_tag(telegram_tag)
    if user:
        if user.telegram_id is None or user.telegram_id != telegram_id:
            logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º telegram_id –¥–ª—è {telegram_tag}: {user.telegram_id} -> {telegram_id}")
            await update_user_telegram_id(user.id, telegram_id)
            user.telegram_id = telegram_id
        return user

    success, response, user = await add_user_if_not_exists(telegram_tag, telegram_id)
    if not success:
        raise Exception(response)
    logger.info(response)
    return user
